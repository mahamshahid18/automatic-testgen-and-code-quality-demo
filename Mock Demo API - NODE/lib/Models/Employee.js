/**
 * MockDemoAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const Person = require('./Person');

/**
 * Creates an instance of Employee
 */
class Employee extends Person {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.department = this.constructor.getValue(obj.department);
        this.dependents = this.constructor.getValue(obj.dependents);
        this.salary = this.constructor.getValue(obj.salary);
        this.boss = this.constructor.getValue(obj.boss);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'department', realName: 'department' },
            { name: 'dependents', realName: 'dependents', array: true, type: 'Person' },
            { name: 'salary', realName: 'salary' },
            { name: 'boss', realName: 'boss', type: 'Person' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
            Empl: 'Employee',
            Boss: 'Boss',
        };
    }
}

module.exports = Employee;
